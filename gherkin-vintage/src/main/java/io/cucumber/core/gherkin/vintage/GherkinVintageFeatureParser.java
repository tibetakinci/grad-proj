package io.cucumber.core.gherkin.vintage;

import Ipog.IpogMain;
import gherkin.*;
import gherkin.ast.*;
import gherkin.deps.com.google.gson.Gson;
import gherkin.pickles.Compiler;
import io.cucumber.core.gherkin.Feature;
import io.cucumber.core.gherkin.FeatureParser;
import io.cucumber.core.gherkin.FeatureParserException;
import io.cucumber.core.gherkin.Pickle;

import java.net.URI;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.UUID;
import java.util.function.Supplier;
import java.util.stream.Collectors;

public final class GherkinVintageFeatureParser implements FeatureParser {
    private static Optional<Feature> parseGherkin5(URI path, String source) {
        try {
            Parser<GherkinDocument> parser = new Parser(new AstBuilder());
            TokenMatcher matcher = new TokenMatcher();
            GherkinDocument gherkinDocument = parser.parse(source, matcher);


            int count = gherkinDocument.getFeature().getChildren().size();
            Gson gson = new Gson();

            for (int i = 0; i < count; i++){
                if ("Scenario Outline".equals(gherkinDocument.getFeature().getChildren().get(i).getKeyword())){
                    ScenarioOutline scDef = (ScenarioOutline)gherkinDocument.getFeature().getChildren().get(i);
                    if (scDef.getParameters().size() > 0 && scDef.getCoverageStrength().size() > 0) {
                        String jj = gson.toJson(scDef);
                        Examples newExamples = createExamples(jj);
                        scDef.getExamples().add(newExamples);
                    }
                }
            }


            if(gherkinDocument.getFeature() == null){
                return Optional.empty();
            }
            List<Pickle> pickles = compilePickles(path, gherkinDocument);
            if (pickles.isEmpty()) {
                return Optional.empty();
            }
            GherkinVintageFeature feature = new GherkinVintageFeature(gherkinDocument, path, source, pickles);
            return Optional.of(feature);
        } catch (ParserException e) {
            throw new FeatureParserException("Failed to parse resource at: " + path.toString(), e);
        }
    }

    private static List<Pickle> compilePickles(URI path, GherkinDocument document) {
        GherkinDialectProvider dialectProvider = new GherkinDialectProvider();
        String language = document.getFeature().getLanguage();
        GherkinDialect dialect = dialectProvider.getDialect(language, null);
        return new Compiler().compile(document)
            .stream()
            .map(pickle -> {
                return new GherkinVintagePickle(pickle, path, document, dialect);
            })
            .collect(Collectors.toList());
    }

    private static Examples createExamples(String jsonFeature) {
        IpogMain ipog = new IpogMain(jsonFeature);

        String[] paramNames = ipog.getParameterNames();
        Object[][] coveringArray = ipog.getExamples();

        List<TableCell> tableCells = new ArrayList<>();
        for (String item:paramNames) {
            TableCell tCell = new TableCell(new Location(1,1), item);
            tableCells.add(tCell);
        }
        TableRow tableHeader = new TableRow(new Location(1,1), tableCells);
        tableCells = new ArrayList<>();
        List<TableRow> tableBody = new ArrayList<>();
        for (int i = 0; i < coveringArray.length; i++){
            for (Object item : coveringArray[i]) {
                TableCell tCell = new TableCell(new Location(1,1), (String)item);
                tableCells.add(tCell);
            }
            TableRow tableRow = new TableRow(new Location(1,1), tableCells);
            tableBody.add(tableRow);
            tableCells = new ArrayList<>();
        }

        return new Examples(new Location(1,1),  new ArrayList<>(), "Examples", "", "Generated by IPOG algorithm", tableHeader, tableBody);
    }

    @Override
    public Optional<Feature> parse(URI path, String source, Supplier<UUID> idGenerator) {
        return parseGherkin5(path, source);
    }

    @Override
    public String version() {
        return "5";
    }
}
